@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix dbo: <http://dbpedia.org/ontology/> .
@prefix dbr: <http://dbpedia.org/resource/> .
@prefix dbp: <http://dbpedia.org/property/> .
@prefix gn: <http://www.geonames.org/ontology#> .
@prefix wb: <http://data.worldbank.org/> .
@base <http://dbpedia.org/resource/> .

### Using Split function with YARRRML:
# prefixes:
#   grel: "http://users.ugent.be/~bjdmeest/function/grel.ttl#"
#   ex: "http://example.com/"

# mappings:
#   person:
#     sources:
#       - ['source_1.csv~csv']
#     s: http://example.com/$(ISO)
#     po:
#       - [a, foaf:Person]
#       - [ex:name, $(neighbours)]
#       - p: ex:neighbours
#         o:
#             function: grel:string_split
#             parameters:
#                 - [grel:valueParameter, $(neighbours)]
#                 - [grel:p_string_sep, "|"]
#             language: en
        

<#TriplesMapGeonames>
  a rr:TriplesMap ;

  rml:logicalSource [
    rml:source "/mnt/workspace/input/geonames/dataset-geonames-countryInfo.csv";
    rml:referenceFormulation ql:CSV
  ];

  rr:subjectMap [ rr:template "http://geonames.org/country/{ISO}" ;
    rr:class gn:Country ];

  rr:predicateObjectMap [ 
    rr:predicate rdfs:label ;
    rr:objectMap [ rml:reference "Country" ]
  ] ;

  # using standard dc:identifier for ISO code
  rr:predicateObjectMap [ 
    rr:predicate dc:identifier ;
    rr:objectMap [ rml:reference "ISO" ] # Then use LIMES to join on this property
  ] ;

  # Using DB ontology for the rest
  # The GeoNames ontology is not expressive enough to express those relations
  rr:predicateObjectMap [ 
    rr:predicate dbo:iso31661Code ;
    rr:objectMap [ rml:reference "ISO-Numeric" ; rr:datatype xsd:integer ]
  ] ;
  rr:predicateObjectMap [ 
    rr:predicate dbo:alternativeName ;
    rr:objectMap [ rml:reference "fips" ]
  ] ;
  
  rr:predicateObjectMap [ 
    rr:predicate dbo:capital ;
    rr:objectMap [ rml:reference "Capital" ]
  ] ;
 
  # In km2 in the CSV
  rr:predicateObjectMap [ 
    rr:predicate dbo:areaTotal ;
    rr:objectMap [ rml:reference "Area" ; rr:datatype xsd:double ]
  ] ;

  rr:predicateObjectMap [ 
    rr:predicate dbo:populationTotal  ;
    rr:objectMap [ rml:reference "Population" ; rr:datatype xsd:integer ]
  ] ;

  rr:predicateObjectMap [ 
    rr:predicate dbo:continent ;
    rr:objectMap [ rr:template "http://geonames.org/continent/{Continent}" ]
  ] ;
  
  rr:predicateObjectMap [ 
    rr:predicate dbp:cctld ;
    rr:objectMap [ rml:reference "tld" ]
  ] ;
  
  # Note: a class could also be defined for Currency codes and names
  rr:predicateObjectMap [ 
    rr:predicate dbo:currency ;
    rr:objectMap [ rml:reference "CurrencyCode" ]
  ] ;


  # Could be splitted on | for better accuracy
  rr:predicateObjectMap [ 
    rr:predicate dbo:language ;
    rr:objectMap [ rml:reference "Languages" ]
  ] ;

  # No relevant property for the next in DBpedia, using a custom ones
  rr:predicateObjectMap [ 
    rr:predicate gn:phone_code ;
    rr:objectMap [ rml:reference "Phone" ]
  ] ;
  rr:predicateObjectMap [ 
    rr:predicate gn:neighbours ;
    rr:objectMap [ rml:reference "neighbours" ]
  ] .

<#ContinentMapGeonames>
  a rr:TriplesMap ;

  rml:logicalSource [
    rml:source "/mnt/workspace/input/geonames/dataset-geonames-countryInfo.csv";
    rml:referenceFormulation ql:CSV
  ];

  rr:subjectMap [ rr:template "http://geonames.org/continent/{Continent}" ;
    rr:class gn:Continent ];

  rr:predicateObjectMap [ 
    rr:predicate rdfs:label ;
    rr:objectMap [ rml:reference "Continent" ]
  ] .
