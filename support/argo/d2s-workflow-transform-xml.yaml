apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: d2s-workflow-transform-xml-
spec:
  entrypoint: execute-workflow

  volumeClaimTemplates:                 # define volume, same syntax as k8s Pod spec
  - metadata:
      name: workdir                     # name of volume claim
      annotations:
        volume.beta.kubernetes.io/storage-class: maprfs-ephemeral
        volume.beta.kubernetes.io/storage-provisioner: mapr.com/maprfs
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Gi                  # Gi => 1024 * 1024 * 1024

  arguments:
    parameters:
    - name: datasetToProcess
      value: drugbank
    - name: downloadUsername
      value: my_download_username
    - name: tmpGraphUri
      value: https://w3id.org/data2services/graph/xml2rdf
    - name: sparqlEndpoint
      value: http://node000002.cluster.ids.unimaas.nl/
    - name: sparqlRepository
      value: test
    - name: sparqlUsername
      value: import_user
    - name: sparqlQueryMetadata
      value: https://github.com/MaastrichtU-IDS/data2services-transform-repository/tree/master/sparql/insert-biolink/drugbank/5.0
    - name: sparqlQueryTransform
      value: https://github.com/MaastrichtU-IDS/data2services-transform-repository/tree/master/sparql/insert-biolink/drugbank
    - name: sparqlBiolinkGraphUri
      value: https://w3id.org/data2services/graph/biolink
    - name: sparqlGenericRdfServiceUrl
      value: http://localhost:7200/repositories/test

  templates:
  - name: execute-workflow
    steps:
    - - name: run-download
        template: d2s-download
    - - name: run-xml2rdf
        template: xml2rdf
    - - name: run-rdf-upload
        template: rdf-upload
    - - name: sparql-insert-metadata
        template: d2s-sparql-operations
        arguments:
          parameters:
          - name: sparqlQueriesPath
            value: "{{workflow.parameters.sparqlQueryMetadata}}"
          - name: sparqlInputGraph
            value: "{{workflow.parameters.tmpGraphUri}}"
          - name: sparqlOutputGraph
            value: "{{workflow.parameters.sparqlBiolinkGraphUri}}"
          - name: sparqlServiceUrl
            value: "{{workflow.parameters.sparqlGenericRdfServiceUrl}}"
    - - name: sparql-transform-queries
        template: d2s-sparql-operations
        arguments:
          parameters:
          - name: sparqlQueriesPath
            value: "{{workflow.parameters.sparqlQueryTransform}}"
          - name: sparqlInputGraph
            value: "{{workflow.parameters.tmpGraphUri}}"
          - name: sparqlOutputGraph
            value: "{{workflow.parameters.sparqlBiolinkGraphUri}}"
          - name: sparqlServiceUrl
            value: "{{workflow.parameters.sparqlGenericRdfServiceUrl}}"
    - - name: sparql-compute-hcls-stats
        template: d2s-sparql-operations
        arguments:
          parameters:
          - name: sparqlQueriesPath
            value: https://github.com/MaastrichtU-IDS/data2services-transform-repository/tree/master/sparql/compute-hcls-stats
          - name: sparqlInputGraph
            value: "{{workflow.parameters.sparqlBiolinkGraphUri}}"
          - name: sparqlOutputGraph
            value: "{{workflow.parameters.sparqlBiolinkGraphUri}}"
          - name: sparqlServiceUrl
            value: "{{workflow.parameters.sparqlGenericRdfServiceUrl}}"


  - name: d2s-download
    container:
      image: vemonet/data2services-download:latest
      args: [ "--download-datasets", "{{workflow.parameters.datasetToProcess}}", 
      "--username", "{{workflow.parameters.downloadUsername}}", 
      "--password", "$DOWNLOADPASSWORD" ] # TODO: this should not be a env var
      env:
      - name: DOWNLOADPASSWORD
        valueFrom:
          secretKeyRef:
            name: d2s-download-password
            key: password
      volumeMounts:
      - name: workdir
        mountPath: /data

  - name: xml2rdf
    container:
      image: vemonet/xml2rdf:latest
      args: [ "-i", "/data/{{workflow.parameters.datasetToProcess}}/*.xml", "-o", "/data/rdf_output.nq", "-g", "{{workflow.parameters.tmpGraphUri}}" ]
      volumeMounts:
      - name: workdir
        mountPath: /data

  - name: rdf-upload
    container:
      image: vemonet/rdf-upload:latest
      args: ["-url", "{{workflow.parameters.sparqlEndpoint}}", 
      "-rep", "{{workflow.parameters.sparqlRepository}}", 
      "-if", "/data/rdf_output.nq", 
      "-un", "{{workflow.parameters.sparqlUsername}}", "-pw", "test"]
      #"-un", "{{workflow.parameters.sparqlUsername}}", "-pw", "$SPARQLPASSWORD"]  # TODO: secret not working
      env:
      - name: SPARQLPASSWORD
        valueFrom:
          secretKeyRef:
            name: d2s-sparql-password
            key: password
      volumeMounts:
      - name: workdir
        mountPath: /data

  - name: d2s-sparql-operations
    inputs:
      parameters:
      - name: sparqlQueriesPath
      - name: sparqlInputGraph
      - name: sparqlOutputGraph
      - name: sparqlServiceUrl
    container:
      image: vemonet/data2services-sparql-operations:latest
      args: ["-ep", "{{workflow.parameters.sparqlEndpoint}}", "-rep", "{{workflow.parameters.sparqlRepository}}", 
    "-op", "update", "-f", "{{inputs.parameters.sparqlQueriesPath}}",
    "-un", "{{workflow.parameters.sparqlUsername}}", 
    "-pw", "test",
    #"-pw", "$SPARQLPASSWORD",  # TODO: secret not working
    "--var-inputGraph", "{{inputs.parameters.sparqlInputGraph}}",
    "--var-outputGraph", "{{inputs.parameters.sparqlOutputGraph}}", 
    "--var-serviceUrl", "{{inputs.parameters.sparqlServiceUrl}}", ]
      env:
      - name: SPARQLPASSWORD
        valueFrom:
          secretKeyRef:
            name: d2s-sparql-password
            key: password
