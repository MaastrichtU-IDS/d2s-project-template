apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: d2s-workflow-transform-xml-
spec:
  entrypoint: execute-workflow

  volumeClaimTemplates:                 # define volume, same syntax as k8s Pod spec
  - metadata:
      name: workdir                     # name of volume claim
      annotations:
        volume.beta.kubernetes.io/storage-class: maprfs-ephemeral
        volume.beta.kubernetes.io/storage-provisioner: mapr.com/maprfs
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Gi                  # Gi => 1024 * 1024 * 1024

  arguments:
    parameters:
    - name: datasetToProcess
      value: drugbank
    - name: downloadUsername
      value: my_download_username
    - name: graphUri
      value: https://w3id.org/data2services/graph/xml2rdf
    - name: sparqlEndpoint
      value: http://node000002.cluster.ids.unimaas.nl/
    - name: sparqlRepository
      value: test
    - name: sparqlUsername
      value: import_user

  templates:
  - name: execute-workflow
    steps:
    - - name: run-download
        template: d2s-download
    - - name: run-xml2rdf
        template: xml2rdf
    - - name: run-rdf-upload
        template: rdf-upload


  - name: d2s-download
    container:
      image: vemonet/data2services-download:latest
      args: [ "--download-datasets", "{{workflow.parameters.datasetToProcess}}", 
      "--username", "{{workflow.parameters.downloadUsername}}", 
      "--password", "$DOWNLOADPASSWORD" ]
      env:
      - name: DOWNLOADPASSWORD
        valueFrom:
          secretKeyRef:
            name: d2s-download-password
            key: password
      volumeMounts:
      - name: workdir
        mountPath: /data

  - name: xml2rdf
    container:
      image: vemonet/xml2rdf:latest
      args: [ "-i", "/data/{{workflow.parameters.datasetToProcess}}/*.xml", "-o", "/data/rdf_output.nq", "-g", "{{workflow.parameters.graphUri}}" ]
      volumeMounts:
      - name: workdir
        mountPath: /data

  - name: rdf-upload
    container:
      image: vemonet/rdf-upload:latest
      args: ["-url", "{{workflow.parameters.sparqlEndpoint}}", 
      "-rep", "{{workflow.parameters.sparqlRepository}}", 
      "-if", "/data/rdf_output.nq", 
      "-un", "{{workflow.parameters.sparqlUsername}}", "-pw", "$SPARQLPASSWORD"]
      env:
      - name: SPARQLPASSWORD
        valueFrom:
          secretKeyRef:
            name: d2s-sparql-password
            key: password
      volumeMounts:
      - name: workdir
        mountPath: /data
